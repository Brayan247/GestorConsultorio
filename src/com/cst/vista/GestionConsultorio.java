/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cst.vista;

import com.cst.modelo.Pacientes;
import com.cst.modelo.HistorialMedico;
import com.cst.controlador.HistorialMedicobd;
import com.cst.controlador.Pacientesbd;
import com.cst.controlador.Medicosbd;
import com.cst.controlador.ExamenesMedicosbd;
import com.cst.modelTables.ComunicacionVistaModelosTablas;
import com.cst.modelTables.ModelTablePacientes;
import com.cst.modelTables.ModelTableExamenMedico;
import com.cst.modelTables.ModelTableMedicos;
import com.cst.modelTables.ModelTableHistorialMedico;
import com.cst.modelo.ExamenesMedicos;
import com.cst.modelo.Medicos;
import com.cst.utilidades.Utilidades;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Ordenador
 */
public class GestionConsultorio extends javax.swing.JFrame implements ComunicacionVistaModelosTablas {

    private Utilidades utilidades;
    private Pacientes pacienteseditareliminar;
    private Medicos medicoeditareliminar;
    private Medicosbd controladorMedicos;
    private ExamenesMedicos examenmedicoguardar;
    private HistorialMedico historialmedicoeditar;
    private HistorialMedicobd controladorHistorialmedico;
    private Pacientesbd controladorpacientes;
    private ExamenesMedicosbd controladorExamenesMedicos;
    private ModelTablePacientes modelTablePacientes;
    private ModelTableExamenMedico modelTableExamenesMedicos;
    private ModelTableMedicos modelTableMedicos;
    private ModelTableHistorialMedico modelTableHistorialMedico;

    /**
     * Creates new form GestionConsultorio
     */
    public GestionConsultorio() {
        utilidades = new Utilidades();
        controladorpacientes = new Pacientesbd();
        controladorHistorialmedico = new HistorialMedicobd();
        controladorMedicos = new Medicosbd();
        controladorExamenesMedicos = new ExamenesMedicosbd();
        modelTablePacientes = new ModelTablePacientes(controladorpacientes.ObtenerPacientes(), this);
        modelTableExamenesMedicos = new ModelTableExamenMedico(controladorExamenesMedicos.ObtenerExamenesMedicos(), this);
        modelTableMedicos = new ModelTableMedicos(controladorMedicos.ObtenerMedicos(), this);
        modelTableHistorialMedico = new ModelTableHistorialMedico(controladorHistorialmedico.ObtenerHistorialMedico(), this);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHistoriaClinicaPaciente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCedulaPaciente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtApellidoPaciente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jdtFechaNacimientoPaciente = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txtResidenciaPaciente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEdadPaciente = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtEstadoCivilPaciente = new javax.swing.JTextField();
        cmbGeneroPaciente = new javax.swing.JComboBox<>();
        btnCalcularEdad = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnLimpiarPaciente = new javax.swing.JButton();
        txtEliminarPaciente = new javax.swing.JButton();
        txtEditarPaciente = new javax.swing.JButton();
        btnGuardarPaciente = new javax.swing.JButton();
        cmbBusquedaPaciente = new javax.swing.JComboBox<>();
        btnBuscarPaciente = new javax.swing.JButton();
        txtBusquedaPaciente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePaciente = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtCedulaMedico = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNombreMedico = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtApellidoMedico = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtCodigoMedico = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtDireccionMedico = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtAniosContratoMedico = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtEspecialidadMedico = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        btnLimpiarMedicos = new javax.swing.JButton();
        btmEliminarMedicos = new javax.swing.JButton();
        btnEditarPacientes = new javax.swing.JButton();
        btnGuardarMedicos = new javax.swing.JButton();
        cmbBusquedaMedicos = new javax.swing.JComboBox<>();
        btnBuscarMedicos = new javax.swing.JButton();
        txtBusquedaMedicos = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtDatosMedicoHistorialMedico = new javax.swing.JTextField();
        txtCodigoHistorialMedico = new javax.swing.JTextField();
        txtHistorialClinicoPacienteHistorialMedico = new javax.swing.JTextField();
        txtDatosPacienteHistorialMedico = new javax.swing.JTextField();
        txtCodigoMedicoHistorialMedico = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPadecimientoHistorialMedico = new javax.swing.JTextArea();
        txtMedicamentosHistorialMedico = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtInstruccionesHistorialMedico = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        txtLimpiarHistorialMedico = new javax.swing.JButton();
        btnGuardarHistorialMedico = new javax.swing.JButton();
        cmbBusquedaHistorialMedico = new javax.swing.JComboBox<>();
        btnBuscarHistorialMedico = new javax.swing.JButton();
        txtBusquedaHistorialMedico = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtTipoExamenExamenMedico = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtInstruccionesExamenMedico = new javax.swing.JTextArea();
        txtHistoriaClinicaExamenesMedicos = new javax.swing.JTextField();
        txtCodigoMedicoExamenMedico = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtCedulaExamenesMedicos = new javax.swing.JTextField();
        txtNombreExamenMedico = new javax.swing.JTextField();
        txtApellidoExamenMedico = new javax.swing.JTextField();
        txtGeneroExamenMedico = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jdtFechaExpiracionExamenMedico = new com.toedter.calendar.JDateChooser();
        jdtFechaNacimientoExamenMedico = new com.toedter.calendar.JDateChooser();
        jPanel9 = new javax.swing.JPanel();
        btnLimpiarExamenMedico = new javax.swing.JButton();
        btnGuardarExamenMedico = new javax.swing.JButton();
        cmbBusquedaExamenMedico = new javax.swing.JComboBox<>();
        btnBuscarExamenMedicp = new javax.swing.JButton();
        txtBusquedaExamenMedico = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuAcercaDe = new javax.swing.JMenu();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONSULTORIO S.A");

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Paciente"));

        jLabel1.setText("Historia Clinica: ");

        jLabel7.setText("Cedula: ");

        jLabel2.setText("Nombre: ");

        jLabel3.setText("Apellido: ");

        jLabel4.setText("Fecha de nacimiento: ");

        jLabel5.setText("Residencia: ");

        jLabel6.setText("Edad: ");

        txtEdadPaciente.setEditable(false);

        jLabel8.setText("Genero: ");

        jLabel9.setText("Estado Civil:");

        cmbGeneroPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Definido", "Masculino", "Femenino" }));

        btnCalcularEdad.setText("Calcular Edad");
        btnCalcularEdad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularEdadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCedulaPaciente)
                            .addComponent(txtHistoriaClinicaPaciente)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEstadoCivilPaciente)
                            .addComponent(txtResidenciaPaciente)
                            .addComponent(jdtFechaNacimientoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                            .addComponent(txtNombrePaciente)
                            .addComponent(txtApellidoPaciente)
                            .addComponent(cmbGeneroPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(txtEdadPaciente)
                                .addGap(18, 18, 18)
                                .addComponent(btnCalcularEdad)))))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHistoriaClinicaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtApellidoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jdtFechaNacimientoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtResidenciaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCalcularEdad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbGeneroPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtEstadoCivilPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btnLimpiarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/limpiar.png"))); // NOI18N
        btnLimpiarPaciente.setText("Limpiar");
        btnLimpiarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPacienteActionPerformed(evt);
            }
        });

        txtEliminarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/eliminar.png"))); // NOI18N
        txtEliminarPaciente.setText("Eliminar");
        txtEliminarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEliminarPacienteActionPerformed(evt);
            }
        });

        txtEditarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/editar.png"))); // NOI18N
        txtEditarPaciente.setText("Editar");
        txtEditarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditarPacienteActionPerformed(evt);
            }
        });

        btnGuardarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/guardar.png"))); // NOI18N
        btnGuardarPaciente.setText("Guardar");
        btnGuardarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPacienteActionPerformed(evt);
            }
        });

        cmbBusquedaPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cedula", "Historia Clinica" }));

        btnBuscarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/buscar.png"))); // NOI18N
        btnBuscarPaciente.setText("Buscar");
        btnBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacienteActionPerformed(evt);
            }
        });

        txtBusquedaPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaPacienteKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbBusquedaPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(btnGuardarPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(txtEditarPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(txtEliminarPaciente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(txtBusquedaPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarPaciente)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiarPaciente)
                    .addComponent(txtEliminarPaciente)
                    .addComponent(txtEditarPaciente)
                    .addComponent(btnGuardarPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBusquedaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPaciente)
                    .addComponent(txtBusquedaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablePaciente.setModel(modelTablePacientes);
        jScrollPane1.setViewportView(tablePaciente);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Pacientes", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Medicos"));

        jLabel10.setText("Cedula: ");

        jLabel11.setText("Nombre: ");

        jLabel12.setText("Apellido: ");

        jLabel13.setText("Codigo: ");

        jLabel14.setText("Direccion: ");

        jLabel15.setText("Años de contrato: ");

        jLabel16.setText("Especialidad: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEspecialidadMedico)
                    .addComponent(txtCedulaMedico)
                    .addComponent(txtNombreMedico)
                    .addComponent(txtApellidoMedico)
                    .addComponent(txtCodigoMedico)
                    .addComponent(txtDireccionMedico)
                    .addComponent(txtAniosContratoMedico))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(txtNombreMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtApellidoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtCodigoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtDireccionMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtAniosContratoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtEspecialidadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        btnLimpiarMedicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/limpiar.png"))); // NOI18N
        btnLimpiarMedicos.setText("Limpiar");
        btnLimpiarMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMedicosActionPerformed(evt);
            }
        });

        btmEliminarMedicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/eliminar.png"))); // NOI18N
        btmEliminarMedicos.setText("Eliminar");
        btmEliminarMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmEliminarMedicosActionPerformed(evt);
            }
        });

        btnEditarPacientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/editar.png"))); // NOI18N
        btnEditarPacientes.setText("Editar");
        btnEditarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarPacientesActionPerformed(evt);
            }
        });

        btnGuardarMedicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/guardar.png"))); // NOI18N
        btnGuardarMedicos.setText("Guardar");
        btnGuardarMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarMedicosActionPerformed(evt);
            }
        });

        cmbBusquedaMedicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cedula", "Codigo" }));

        btnBuscarMedicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/buscar.png"))); // NOI18N
        btnBuscarMedicos.setText("Buscar");
        btnBuscarMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMedicosActionPerformed(evt);
            }
        });

        txtBusquedaMedicos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaMedicosKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnLimpiarMedicos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarMedicos)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditarPacientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btmEliminarMedicos))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cmbBusquedaMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBusquedaMedicos)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarMedicos)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiarMedicos)
                    .addComponent(btmEliminarMedicos)
                    .addComponent(btnEditarPacientes)
                    .addComponent(btnGuardarMedicos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBusquedaMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarMedicos)
                    .addComponent(txtBusquedaMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable2.setModel(modelTableMedicos);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Medicos", jPanel5);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Historial Medico"));

        jLabel17.setText("Codigo:");

        jLabel18.setText("Historia clinica de Paciente: ");

        jLabel19.setText("Codigo del medico:");

        jLabel20.setText("Padecimiento:");

        jLabel21.setText("Medicamentos: ");

        jLabel23.setText("Nombre y apellido del paciente");

        jLabel24.setText("Nombre y apellido del medico");

        txtHistorialClinicoPacienteHistorialMedico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHistorialClinicoPacienteHistorialMedicoFocusLost(evt);
            }
        });

        txtCodigoMedicoHistorialMedico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoMedicoHistorialMedicoFocusLost(evt);
            }
        });

        txtPadecimientoHistorialMedico.setColumns(20);
        txtPadecimientoHistorialMedico.setRows(5);
        jScrollPane3.setViewportView(txtPadecimientoHistorialMedico);

        jLabel22.setText("Indicaciones: ");

        txtInstruccionesHistorialMedico.setColumns(20);
        txtInstruccionesHistorialMedico.setRows(5);
        jScrollPane4.setViewportView(txtInstruccionesHistorialMedico);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(txtDatosMedicoHistorialMedico)
                    .addComponent(txtCodigoHistorialMedico)
                    .addComponent(txtHistorialClinicoPacienteHistorialMedico)
                    .addComponent(txtDatosPacienteHistorialMedico)
                    .addComponent(txtCodigoMedicoHistorialMedico)
                    .addComponent(jScrollPane3)
                    .addComponent(txtMedicamentosHistorialMedico))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtCodigoHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtHistorialClinicoPacienteHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtDatosPacienteHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(txtCodigoMedicoHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(txtDatosMedicoHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicamentosHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        txtLimpiarHistorialMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/limpiar.png"))); // NOI18N
        txtLimpiarHistorialMedico.setText("Limpiar");
        txtLimpiarHistorialMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLimpiarHistorialMedicoActionPerformed(evt);
            }
        });

        btnGuardarHistorialMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/guardar.png"))); // NOI18N
        btnGuardarHistorialMedico.setText("Guardar");
        btnGuardarHistorialMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarHistorialMedicoActionPerformed(evt);
            }
        });

        cmbBusquedaHistorialMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Historia clinica del Paciente", "Codigo del Medico" }));

        btnBuscarHistorialMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/buscar.png"))); // NOI18N
        btnBuscarHistorialMedico.setText("Buscar");
        btnBuscarHistorialMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarHistorialMedicoActionPerformed(evt);
            }
        });

        txtBusquedaHistorialMedico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaHistorialMedicoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtLimpiarHistorialMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarHistorialMedico))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(cmbBusquedaHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBusquedaHistorialMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarHistorialMedico)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLimpiarHistorialMedico)
                    .addComponent(btnGuardarHistorialMedico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBusquedaHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarHistorialMedico)
                    .addComponent(txtBusquedaHistorialMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable3.setModel(modelTableHistorialMedico);
        jScrollPane5.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Historial Medico", jPanel11);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Examen Medico"));

        jLabel26.setText("Tipo de Examen: ");

        jLabel27.setText("Instrucciones: ");

        txtInstruccionesExamenMedico.setColumns(20);
        txtInstruccionesExamenMedico.setRows(5);
        jScrollPane6.setViewportView(txtInstruccionesExamenMedico);

        txtHistoriaClinicaExamenesMedicos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHistoriaClinicaExamenesMedicosFocusLost(evt);
            }
        });

        txtCodigoMedicoExamenMedico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoMedicoExamenMedicoFocusLost(evt);
            }
        });

        jLabel28.setText("Codigo del Medico");

        jLabel29.setText("Historia Clinica del Paciente");

        jLabel30.setText("Cedula: ");

        jLabel31.setText("Nombre:");

        jLabel32.setText("Apellido:");

        jLabel33.setText("Fecha Nacimiento: ");

        jLabel34.setText("Genero:");

        txtCedulaExamenesMedicos.setEditable(false);

        txtNombreExamenMedico.setEditable(false);

        txtApellidoExamenMedico.setEditable(false);

        txtGeneroExamenMedico.setEditable(false);

        jLabel25.setText("Fecha de Expiracion:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTipoExamenExamenMedico)
                            .addComponent(jScrollPane6)
                            .addComponent(txtCedulaExamenesMedicos)
                            .addComponent(txtHistoriaClinicaExamenesMedicos)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34)
                            .addComponent(jLabel28)
                            .addComponent(jLabel25))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombreExamenMedico)
                            .addComponent(txtApellidoExamenMedico)
                            .addComponent(txtCodigoMedicoExamenMedico)
                            .addComponent(txtGeneroExamenMedico, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jdtFechaExpiracionExamenMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jdtFechaNacimientoExamenMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtTipoExamenExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHistoriaClinicaExamenesMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtCedulaExamenesMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtNombreExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(txtApellidoExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel33)
                    .addComponent(jdtFechaNacimientoExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtGeneroExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtCodigoMedicoExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdtFechaExpiracionExamenMedico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnLimpiarExamenMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/limpiar.png"))); // NOI18N
        btnLimpiarExamenMedico.setText("Limpiar");
        btnLimpiarExamenMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarExamenMedicoActionPerformed(evt);
            }
        });

        btnGuardarExamenMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/guardar.png"))); // NOI18N
        btnGuardarExamenMedico.setText("Guardar");
        btnGuardarExamenMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarExamenMedicoActionPerformed(evt);
            }
        });

        cmbBusquedaExamenMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo", "Historia Clinica", "Codigo del Medico" }));

        btnBuscarExamenMedicp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cst/resourse/img/buscar.png"))); // NOI18N
        btnBuscarExamenMedicp.setText("Buscar");
        btnBuscarExamenMedicp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarExamenMedicpActionPerformed(evt);
            }
        });

        txtBusquedaExamenMedico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaExamenMedicoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnLimpiarExamenMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarExamenMedico))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(cmbBusquedaExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBusquedaExamenMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarExamenMedicp)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiarExamenMedico)
                    .addComponent(btnGuardarExamenMedico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBusquedaExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarExamenMedicp)
                    .addComponent(txtBusquedaExamenMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTable5.setModel(modelTableExamenesMedicos);
        jScrollPane8.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab("Examenes Medicos", jPanel12);

        jMenu1.setText("Archivo");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        jMenuAcercaDe.setText("Acerca de");
        jMenuAcercaDe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuAcercaDeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuAcercaDe);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPacienteActionPerformed
        pacienteseditareliminar = guardareditarpacientes();
        if (controladorpacientes.GuardarPacientes(pacienteseditareliminar)) {
            JOptionPane.showMessageDialog(rootPane, "Persona guardado con exito en el sistema");
            LimpiarPacientes();
            modelTablePacientes.setPacientes(controladorpacientes.ObtenerPacientes());
            modelTablePacientes.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnGuardarPacienteActionPerformed

    public Pacientes guardareditarpacientes() {
        if (txtHistoriaClinicaPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Historia Clinica", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtHistoriaClinicaPaciente.requestFocus();
            return null;
        }
        if (txtCedulaPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Cedula", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCedulaPaciente.requestFocus();
            return null;
        }
        if (!utilidades.validadorDeCedula(txtCedulaPaciente.getText())) {
            JOptionPane.showMessageDialog(rootPane, "la cedula ingresada no es valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCedulaPaciente.requestFocus();
            return null;
        }
        if (txtNombrePaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos agregados en Nombre", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtNombrePaciente.requestFocus();
            return null;
        }
        if (txtApellidoPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos agregados en Apellidos", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtApellidoPaciente.requestFocus();
            return null;
        }
        if (jdtFechaNacimientoPaciente.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay fecha asignada el Fecha de Nacimiento", "ERROR", JOptionPane.ERROR_MESSAGE);
            jdtFechaNacimientoPaciente.requestFocus();
            return null;
        }
        if (txtResidenciaPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Residencia", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtResidenciaPaciente.requestFocus();
            return null;
        }
        int genero = 0;
        switch (cmbGeneroPaciente.getSelectedIndex()) {
            case 0://No Definido
                genero = 0;
                break;
            case 1://Masculino
                genero = 1;
                break;
            case 2://Femenino
                genero = 2;
        }
        if (genero == 0) {
            JOptionPane.showMessageDialog(rootPane, "No ah definido el genero del paciente", "ERROR", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (txtEstadoCivilPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos en Estado Civil", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtEstadoCivilPaciente.requestFocus();
            return null;
        }
        Pacientes p = new Pacientes();
        p.setHistoriaclinica(txtHistoriaClinicaPaciente.getText());
        p.setCedula(txtCedulaPaciente.getText());
        p.setNombre(txtNombrePaciente.getText());
        p.setApellido(txtApellidoPaciente.getText());
        p.setFecha_nacimiento(jdtFechaNacimientoPaciente.getDate());
        p.setResidencia(txtResidenciaPaciente.getText());
        p.setEdad(Integer.parseInt(txtEdadPaciente.getText()));
        p.setGenero(genero);
        p.setEstado_civil(txtEstadoCivilPaciente.getText());
        p.setFecha_registro(new Date());
        return p;
    }
    private void txtEditarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditarPacienteActionPerformed
        if (pacienteseditareliminar == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay un Paciente seleccionada para editar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (pacienteseditareliminar != null) {
            pacienteseditareliminar.setNombre(txtNombrePaciente.getText());
            pacienteseditareliminar.setApellido(txtApellidoPaciente.getText());
            pacienteseditareliminar.setResidencia(txtResidenciaPaciente.getText());
            int genero = 0;

            switch (cmbGeneroPaciente.getSelectedIndex()) {
                case 0://No Definido
                    genero = 0;
                    break;
                case 1://Masculino
                    genero = 1;
                    break;
                case 2://Femenino
                    genero = 2;
            }
            if (genero == 0) {
                JOptionPane.showMessageDialog(rootPane, "No ah definido el genero del paciente", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                pacienteseditareliminar.setGenero(genero);
            }
            pacienteseditareliminar.setEstado_civil(txtEstadoCivilPaciente.getText());
            if (controladorpacientes.EditarPacientes(pacienteseditareliminar)) {
                JOptionPane.showMessageDialog(rootPane, "Paciente editado con exito del sitema.");
                LimpiarPacientes();
                desbloquearCamposPaciente();
                pacienteseditareliminar = null;
                modelTablePacientes.setPacientes(controladorpacientes.ObtenerPacientes());
                modelTablePacientes.fireTableDataChanged();

            } else {
                JOptionPane.showMessageDialog(rootPane, "No se puede editar el Paciente", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtEditarPacienteActionPerformed

    public void bloquearCamposPaciente() {
        boolean bloquear = false;
        txtHistoriaClinicaPaciente.setEnabled(bloquear);
        txtCedulaPaciente.setEnabled(bloquear);
        jdtFechaNacimientoPaciente.setEnabled(bloquear);
        txtEdadPaciente.setEnabled(bloquear);
    }

    public void desbloquearCamposPaciente() {
        boolean desbloquear = true;
        txtHistoriaClinicaPaciente.setEnabled(desbloquear);
        txtCedulaPaciente.setEnabled(desbloquear);
        jdtFechaNacimientoPaciente.setEnabled(desbloquear);
        txtEdadPaciente.setEnabled(desbloquear);
    }
    private void txtEliminarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEliminarPacienteActionPerformed
        if (pacienteseditareliminar != null) {
            if (controladorpacientes.EliminarPacientes(pacienteseditareliminar)) {
                JOptionPane.showMessageDialog(rootPane, "Paciente eliminado con éxito del sitema.");
                LimpiarPacientes();
                desbloquearCamposPaciente();
                pacienteseditareliminar = null;
                modelTablePacientes.setPacientes(controladorpacientes.ObtenerPacientes());
                modelTablePacientes.fireTableDataChanged();
            } else {
                JOptionPane.showMessageDialog(rootPane, "No se puede eliminar el paciente seleccionado.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay Paciente seleccionado para eliminar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtEliminarPacienteActionPerformed

    private void btnLimpiarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPacienteActionPerformed
        LimpiarPacientes();
        desbloquearCamposPaciente();
    }//GEN-LAST:event_btnLimpiarPacienteActionPerformed

    public void LimpiarPacientes() {
        txtHistoriaClinicaPaciente.setText("");
        txtCedulaPaciente.setText("");
        txtNombrePaciente.setText("");
        txtApellidoPaciente.setText("");
        jdtFechaNacimientoPaciente.setDate(null);
        txtResidenciaPaciente.setText("");
        txtEdadPaciente.setText("");
        txtEstadoCivilPaciente.setText("");
        cmbGeneroPaciente.setSelectedIndex(0);
        txtBusquedaPaciente.setText("");
        txtHistoriaClinicaPaciente.requestFocus();
    }
    private void txtBusquedaPacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaPacienteKeyReleased
        switch (cmbBusquedaPaciente.getSelectedIndex()) {
            case 0://Ruc
                modelTablePacientes.setPacientes(controladorpacientes.getPacientesCedula(txtBusquedaPaciente.getText()));
                modelTablePacientes.fireTableDataChanged();
                break;
            case 1://Telefono
                modelTablePacientes.setPacientes(controladorpacientes.getPacientesHistoriaClinica(txtBusquedaPaciente.getText()));
                modelTablePacientes.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_txtBusquedaPacienteKeyReleased

    private void btnBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacienteActionPerformed
        switch (cmbBusquedaPaciente.getSelectedIndex()) {
            case 0://Ruc
                modelTablePacientes.setPacientes(controladorpacientes.getPacientesCedula(txtBusquedaPaciente.getText()));
                modelTablePacientes.fireTableDataChanged();
                break;
            case 1://Telefono
                modelTablePacientes.setPacientes(controladorpacientes.getPacientesHistoriaClinica(txtBusquedaPaciente.getText()));
                modelTablePacientes.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_btnBuscarPacienteActionPerformed

    private void btnCalcularEdadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularEdadActionPerformed
        if (jdtFechaNacimientoPaciente.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay fecha asignada el Fecha de Nacimiento", "ERROR", JOptionPane.ERROR_MESSAGE);
            jdtFechaNacimientoPaciente.requestFocus();
        } else {
            txtEdadPaciente.setText(String.valueOf(utilidades.calcularEdad(utilidades.devolverFecha(jdtFechaNacimientoPaciente.getDate()))));
        }
    }//GEN-LAST:event_btnCalcularEdadActionPerformed

    private void btnGuardarHistorialMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarHistorialMedicoActionPerformed
        historialmedicoeditar = guardareditarhistorialmedico();
        if (controladorHistorialmedico.GuardarHistorialMedico(historialmedicoeditar)) {
            JOptionPane.showMessageDialog(rootPane, "Historial Medico guardado con exito en el sistema");
            LimpiarPacientes();
            modelTableHistorialMedico.setHistorial(controladorHistorialmedico.ObtenerHistorialMedico());
            modelTableHistorialMedico.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnGuardarHistorialMedicoActionPerformed

    public HistorialMedico guardareditarhistorialmedico() {
        if (txtCodigoHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Codigo", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoHistorialMedico.requestFocus();
            return null;
        }
        if (txtHistorialClinicoPacienteHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Historia Clinica del paciente", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtHistorialClinicoPacienteHistorialMedico.requestFocus();
            return null;
        }
        if (txtCodigoMedicoHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Codigo del medico", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoMedicoHistorialMedico.requestFocus();
            return null;
        }
        if (txtPadecimientoHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Padecimiento", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtPadecimientoHistorialMedico.requestFocus();
            return null;
        }
        if (txtMedicamentosHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Medicamentos", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtMedicamentosHistorialMedico.requestFocus();
            return null;
        }
        if (txtInstruccionesHistorialMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Instrucciones", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtInstruccionesHistorialMedico.requestFocus();
            return null;
        }
        HistorialMedico hm = new HistorialMedico();
        hm.setCodigo_historial_medico(txtCodigoHistorialMedico.getText());
        hm.setHistoria_clinica_paciente(txtHistorialClinicoPacienteHistorialMedico.getText());
        hm.setCodigo_medico(txtCodigoMedicoHistorialMedico.getText());
        hm.setPadecimiento(txtPadecimientoHistorialMedico.getText());
        hm.setMedicaciones(txtMedicamentosHistorialMedico.getText());
        hm.setInstrucciones(txtInstruccionesHistorialMedico.getText());
        hm.setFecha(new Date());
        return hm;
    }
    private void txtLimpiarHistorialMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimpiarHistorialMedicoActionPerformed
        limpiarHistorialMedico();
    }//GEN-LAST:event_txtLimpiarHistorialMedicoActionPerformed

    private void txtHistorialClinicoPacienteHistorialMedicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHistorialClinicoPacienteHistorialMedicoFocusLost
        Pacientes p = new Pacientes();
        p = controladorpacientes.getPacienteHistoriaClinica(txtHistoriaClinicaExamenesMedicos.getText());

        if (p != null) {
            if (verificacionpacienteHistorialMedico() != null) {
                JOptionPane.showMessageDialog(rootPane, "Ya existe un Historial Medico para este paciente", "ERROR", JOptionPane.ERROR_MESSAGE);
                txtHistorialClinicoPacienteHistorialMedico.setText("");
                txtHistorialClinicoPacienteHistorialMedico.requestFocus();
            } else {
                if (!txtHistoriaClinicaExamenesMedicos.getText().isEmpty()) {
                    datosPaciente();
                    txtCodigoMedicoHistorialMedico.requestFocus();
                }
                datosPaciente();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay un paciente registrado con esa Historia Clinica", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtHistorialClinicoPacienteHistorialMedico.setText("");
            txtHistorialClinicoPacienteHistorialMedico.requestFocus();
        }
    }//GEN-LAST:event_txtHistorialClinicoPacienteHistorialMedicoFocusLost

    private void txtCodigoMedicoHistorialMedicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoMedicoHistorialMedicoFocusLost
        Medicos m = new Medicos();
        m = controladorMedicos.getMedicoCodigo(txtCodigoMedicoHistorialMedico.getText());
        if (m != null) {
            if (!txtCodigoMedicoHistorialMedico.getText().isEmpty()) {
                datosMedicos();
                txtPadecimientoHistorialMedico.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay un medico registrado con ese codigo", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoMedicoHistorialMedico.setText("");
            txtCodigoMedicoHistorialMedico.requestFocus();
        }
    }//GEN-LAST:event_txtCodigoMedicoHistorialMedicoFocusLost

    private void btnGuardarExamenMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarExamenMedicoActionPerformed
        examenmedicoguardar = guardareditarexamenesmedicos();
        if (controladorExamenesMedicos.GuardarExamenesMedicos(examenmedicoguardar)) {
            JOptionPane.showMessageDialog(rootPane, "Examen Medico guardado con exito en el sistema");
            limpiarExamenMedico();
            modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.ObtenerExamenesMedicos());
            modelTableExamenesMedicos.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnGuardarExamenMedicoActionPerformed

    public ExamenesMedicos guardareditarexamenesmedicos() {
        if (txtTipoExamenExamenMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Tipo de examen", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtTipoExamenExamenMedico.requestFocus();
            return null;
        }
        if (txtInstruccionesExamenMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Instrucciones", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtInstruccionesExamenMedico.requestFocus();
            return null;
        }
        if (txtHistoriaClinicaExamenesMedicos.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Historia Clinica", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtHistoriaClinicaExamenesMedicos.requestFocus();
            return null;
        }
        if (txtCodigoMedicoExamenMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Codigo del Medico", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoMedicoExamenMedico.requestFocus();
            return null;
        }
        if (jdtFechaExpiracionExamenMedico.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Fecha de Expiracion", "ERROR", JOptionPane.ERROR_MESSAGE);
            jdtFechaExpiracionExamenMedico.requestFocus();
            return null;
        }
        ExamenesMedicos em = new ExamenesMedicos();
        em.setTipo(txtTipoExamenExamenMedico.getText());
        em.setInstrucciones(txtInstruccionesExamenMedico.getText());
        em.setHistoria_clinica_paciente(txtHistoriaClinicaExamenesMedicos.getText());
        em.setCedula(txtCedulaExamenesMedicos.getText());
        em.setNombre(txtNombreExamenMedico.getText());
        em.setApellido(txtApellidoExamenMedico.getText());
        em.setFecha_nacimiento(jdtFechaNacimientoExamenMedico.getDate());
        int genero = 0;
        if (txtGeneroExamenMedico.getText().equals("Masculino")) {
            genero = 1;
        } else {
            genero = 2;
        }
        em.setGenero(genero);
        em.setCodigo_medico(txtCodigoMedicoExamenMedico.getText());
        em.setFecha_designacion(new Date());
        em.setFecha_expiracion(jdtFechaExpiracionExamenMedico.getDate());
        return em;
    }

    public void limpiarExamenMedico() {
        txtTipoExamenExamenMedico.setText("");
        txtInstruccionesExamenMedico.setText("");
        txtHistoriaClinicaExamenesMedicos.setText("");
        txtCedulaExamenesMedicos.setText("");
        txtNombreExamenMedico.setText("");
        txtApellidoExamenMedico.setText("");
        jdtFechaNacimientoExamenMedico.setDate(null);
        txtGeneroExamenMedico.setText("");
        txtCodigoMedicoExamenMedico.setText("");
        jdtFechaExpiracionExamenMedico.setDate(null);
    }

    public void datosPacienteExamenMedico() {
        Pacientes p = new Pacientes();
        p = controladorpacientes.getPacienteHistoriaClinica(txtHistoriaClinicaExamenesMedicos.getText());
        if (p != null) {
            txtCedulaExamenesMedicos.setText(p.getCedula());
            txtNombreExamenMedico.setText(p.getNombre());
            txtApellidoExamenMedico.setText(p.getApellido());
            jdtFechaNacimientoExamenMedico.setDate(p.getFecha_nacimiento());
            String genero = "";
            if (p.getGenero() == 1) {
                genero = "Masculino";
            } else {
                genero = "Femenino";
            }
            txtGeneroExamenMedico.setText(genero);
            txtCodigoMedicoExamenMedico.requestFocus();
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay un paciente registrado con esa Historia Clinica", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtHistoriaClinicaExamenesMedicos.setText("");
            txtHistoriaClinicaExamenesMedicos.requestFocus();
        }
    }
    private void btnLimpiarExamenMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarExamenMedicoActionPerformed
        txtTipoExamenExamenMedico.setText("");
        txtInstruccionesExamenMedico.setText("");
        txtHistoriaClinicaExamenesMedicos.setText("");
        txtCedulaExamenesMedicos.setText("");
        txtNombreExamenMedico.setText("");
        txtApellidoExamenMedico.setText("");
        jdtFechaNacimientoExamenMedico.setDate(null);
        txtGeneroExamenMedico.setText("");
        txtCodigoMedicoExamenMedico.setText("");
        jdtFechaExpiracionExamenMedico.setDate(null);
    }//GEN-LAST:event_btnLimpiarExamenMedicoActionPerformed

    private void txtHistoriaClinicaExamenesMedicosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHistoriaClinicaExamenesMedicosFocusLost
        if (!txtHistoriaClinicaExamenesMedicos.getText().isEmpty()) {
            datosPacienteExamenMedico();
        }
    }//GEN-LAST:event_txtHistoriaClinicaExamenesMedicosFocusLost

    private void btnLimpiarMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMedicosActionPerformed
        limpiarMedicos();
    }//GEN-LAST:event_btnLimpiarMedicosActionPerformed

    private void txtBusquedaMedicosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaMedicosKeyReleased
        switch (cmbBusquedaMedicos.getSelectedIndex()) {
            case 0://Cedula
                modelTableMedicos.setMedicos(controladorMedicos.getMedicosCedula(txtBusquedaMedicos.getText()));
                modelTableMedicos.fireTableDataChanged();
                break;
            case 1://Codigo
                modelTableMedicos.setMedicos(controladorMedicos.getMedicosCodigo(txtBusquedaMedicos.getText()));
                modelTableMedicos.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_txtBusquedaMedicosKeyReleased

    private void btnBuscarMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMedicosActionPerformed
        switch (cmbBusquedaMedicos.getSelectedIndex()) {
            case 0://Cedula
                modelTableMedicos.setMedicos(controladorMedicos.getMedicosCedula(txtBusquedaMedicos.getText()));
                modelTableMedicos.fireTableDataChanged();
                break;
            case 1://Codigo
                modelTableMedicos.setMedicos(controladorMedicos.getMedicosCodigo(txtBusquedaPaciente.getText()));
                modelTableMedicos.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_btnBuscarMedicosActionPerformed

    private void txtBusquedaHistorialMedicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaHistorialMedicoKeyReleased
        switch (cmbBusquedaHistorialMedico.getSelectedIndex()) {
            case 0://HistoriaClinicaPaciente
                modelTableHistorialMedico.setHistorial(controladorHistorialmedico.getHistorialMedicosHistoriaClinica(txtBusquedaHistorialMedico.getText()));
                modelTableHistorialMedico.fireTableDataChanged();
                break;
            case 1://Codigo Medico
                modelTableHistorialMedico.setHistorial(controladorHistorialmedico.getHistorialMedicosVodigoMedico(txtBusquedaHistorialMedico.getText()));
                modelTableHistorialMedico.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_txtBusquedaHistorialMedicoKeyReleased

    private void txtBusquedaExamenMedicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaExamenMedicoKeyReleased
        switch (cmbBusquedaHistorialMedico.getSelectedIndex()) {
            case 0://Tipo
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosTipo(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
            case 1://Codigo Medico
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosHistoriaClinica(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
            case 2:
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosHistoriaClinica(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_txtBusquedaExamenMedicoKeyReleased

    private void btnBuscarExamenMedicpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarExamenMedicpActionPerformed
        switch (cmbBusquedaHistorialMedico.getSelectedIndex()) {
            case 0://Tipo
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosTipo(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
            case 1://Codigo Medico
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosHistoriaClinica(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
            case 2:
                modelTableExamenesMedicos.setExamenes(controladorExamenesMedicos.getObtenerExamenesMedicosHistoriaClinica(txtBusquedaExamenMedico.getText()));
                modelTableExamenesMedicos.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_btnBuscarExamenMedicpActionPerformed

    private void btnBuscarHistorialMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarHistorialMedicoActionPerformed
        switch (cmbBusquedaHistorialMedico.getSelectedIndex()) {
            case 0://HistoriaClinicaPaciente
                modelTableHistorialMedico.setHistorial(controladorHistorialmedico.getHistorialMedicosHistoriaClinica(txtBusquedaHistorialMedico.getText()));
                modelTableHistorialMedico.fireTableDataChanged();
                break;
            case 1://Codigo Medico
                modelTableHistorialMedico.setHistorial(controladorHistorialmedico.getHistorialMedicosVodigoMedico(txtBusquedaHistorialMedico.getText()));
                modelTableHistorialMedico.fireTableDataChanged();
                break;
        }
    }//GEN-LAST:event_btnBuscarHistorialMedicoActionPerformed

    private void btnGuardarMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarMedicosActionPerformed
        medicoeditareliminar = guardareditarmedicos();
        if (controladorMedicos.GuardarMedicos(medicoeditareliminar)) {
            JOptionPane.showMessageDialog(rootPane, "Medico guardado con exito en el sistema");
            limpiarMedicos();
            modelTableMedicos.setMedicos(controladorMedicos.ObtenerMedicos());
            modelTableMedicos.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnGuardarMedicosActionPerformed

    private void btnEditarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarPacientesActionPerformed
        if (medicoeditareliminar == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay un Medico seleccionada para editar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (medicoeditareliminar != null) {
            medicoeditareliminar.setNombre(txtNombreMedico.getText());
            medicoeditareliminar.setApellido(txtApellidoMedico.getText());
            medicoeditareliminar.setDireccion(txtDireccionMedico.getText());
            medicoeditareliminar.setAnios_contrato(Integer.parseInt(txtAniosContratoMedico.getText()));
            medicoeditareliminar.setEspecialidad(txtEspecialidadMedico.getText());
            if (controladorMedicos.EditarMedicos(medicoeditareliminar)) {
                JOptionPane.showMessageDialog(rootPane, "Medico editado con exito del sitema.");
                limpiarMedicos();
                desbloqueardatosMedicos();
                medicoeditareliminar = null;
                modelTableMedicos.setMedicos(controladorMedicos.ObtenerMedicos());
                modelTableMedicos.fireTableDataChanged();
            } else {
                JOptionPane.showMessageDialog(rootPane, "No se puede editar el Medico", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEditarPacientesActionPerformed

    private void btmEliminarMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmEliminarMedicosActionPerformed
        if (medicoeditareliminar != null) {
            if (controladorMedicos.EliminarMedicos(medicoeditareliminar)) {
                JOptionPane.showMessageDialog(rootPane, "Medico eliminado con éxito del sitema.");
                limpiarMedicos();
                desbloqueardatosMedicos();
                medicoeditareliminar = null;
                modelTableMedicos.setMedicos(controladorMedicos.ObtenerMedicos());
                modelTableMedicos.fireTableDataChanged();
            } else {
                JOptionPane.showMessageDialog(rootPane, "No se puede eliminar el medico seleccionado.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay Medico seleccionado para eliminar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btmEliminarMedicosActionPerformed

    private void jMenuAcercaDeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAcercaDeMouseClicked
        AcercaDe pantallaAcercade = new AcercaDe(this, true);
        pantallaAcercade.setVisible(true);
    }//GEN-LAST:event_jMenuAcercaDeMouseClicked

    private void txtCodigoMedicoExamenMedicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoMedicoExamenMedicoFocusLost
        Medicos m = new Medicos();
        m = controladorMedicos.getMedicoCodigo(txtCodigoMedicoExamenMedico.getText());
        if (m == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay Medico registrado con ese codigo", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoMedicoExamenMedico.setText("");
            txtCodigoMedicoExamenMedico.requestFocus();
        }
    }//GEN-LAST:event_txtCodigoMedicoExamenMedicoFocusLost

    public void bloqueardatosMedicos() {
        boolean bloquear = false;
        txtCedulaMedico.setEnabled(bloquear);
        txtCodigoMedico.setEnabled(bloquear);
    }

    public void desbloqueardatosMedicos() {
        boolean bloquear = true;
        txtCedulaMedico.setEnabled(bloquear);
        txtCodigoMedico.setEnabled(bloquear);
    }

    public Medicos guardareditarmedicos() {
        if (txtCedulaMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Cedula", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCedulaMedico.requestFocus();
            return null;
        }
        if (!utilidades.validadorDeCedula(txtCedulaMedico.getText())) {
            JOptionPane.showMessageDialog(rootPane, "la cedula ingresada no es valida", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCedulaMedico.requestFocus();
            return null;
        }
        if (txtNombreMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Nombre", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtNombreMedico.requestFocus();
            return null;
        }
        if (txtApellidoMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Apellido", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtApellidoMedico.requestFocus();
            return null;
        }
        if (txtCodigoMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Codigo", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtCodigoMedico.requestFocus();
            return null;
        }
        if (txtDireccionMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Direccion", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtDireccionMedico.requestFocus();
            return null;
        }
        if (txtAniosContratoMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Años de contrato", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtAniosContratoMedico.requestFocus();
            return null;
        }
        if (txtEspecialidadMedico.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos ingresados en Especialidad", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtEspecialidadMedico.requestFocus();
            return null;
        }
        Medicos m = new Medicos();
        m.setCedula(txtCedulaMedico.getText());
        m.setNombre(txtNombreMedico.getText());
        m.setApellido(txtApellidoMedico.getText());
        m.setCodigo(txtCodigoMedico.getText());
        m.setDireccion(txtDireccionMedico.getText());
        m.setAnios_contrato(Integer.parseInt(txtAniosContratoMedico.getText()));
        m.setEspecialidad(txtEspecialidadMedico.getText());
        m.setFecha_registro(new Date());
        return m;
    }

    public void limpiarMedicos() {
        txtCedulaMedico.setText("");
        txtNombreMedico.setText("");
        txtApellidoMedico.setText("");
        txtCodigoMedico.setText("");
        txtDireccionMedico.setText("");
        txtAniosContratoMedico.setText("");
        txtEspecialidadMedico.setText("");
        desbloqueardatosMedicos();
    }

    public HistorialMedico verificacionpacienteHistorialMedico() {
        HistorialMedico hm = new HistorialMedico();
        hm = controladorHistorialmedico.getverificacionPaciente(txtHistorialClinicoPacienteHistorialMedico.getText());
        return hm;
    }

    public void datosPaciente() {
        Pacientes p = new Pacientes();
        p = controladorpacientes.getPacienteHistoriaClinica(txtHistorialClinicoPacienteHistorialMedico.getText());
        txtDatosPacienteHistorialMedico.setText(p.getNombre() + " " + p.getApellido());
    }

    public void datosMedicos() {
        Medicos m = new Medicos();
        m = controladorMedicos.getMedicoCodigo(txtCodigoMedicoHistorialMedico.getText());
        txtDatosMedicoHistorialMedico.setText(m.getNombre() + " " + m.getApellido());
    }

    public void limpiarHistorialMedico() {
        txtCodigoHistorialMedico.setText("");
        txtHistorialClinicoPacienteHistorialMedico.setText("");
        txtDatosPacienteHistorialMedico.setText("");
        txtCodigoMedicoHistorialMedico.setText("");
        txtDatosMedicoHistorialMedico.setText("");
        txtPadecimientoHistorialMedico.setText("");
        txtMedicamentosHistorialMedico.setText("");
        txtInstruccionesHistorialMedico.setText("");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionConsultorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionConsultorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionConsultorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionConsultorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionConsultorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmEliminarMedicos;
    private javax.swing.JButton btnBuscarExamenMedicp;
    private javax.swing.JButton btnBuscarHistorialMedico;
    private javax.swing.JButton btnBuscarMedicos;
    private javax.swing.JButton btnBuscarPaciente;
    private javax.swing.JButton btnCalcularEdad;
    private javax.swing.JButton btnEditarPacientes;
    private javax.swing.JButton btnGuardarExamenMedico;
    private javax.swing.JButton btnGuardarHistorialMedico;
    private javax.swing.JButton btnGuardarMedicos;
    private javax.swing.JButton btnGuardarPaciente;
    private javax.swing.JButton btnLimpiarExamenMedico;
    private javax.swing.JButton btnLimpiarMedicos;
    private javax.swing.JButton btnLimpiarPaciente;
    private javax.swing.JComboBox<String> cmbBusquedaExamenMedico;
    private javax.swing.JComboBox<String> cmbBusquedaHistorialMedico;
    private javax.swing.JComboBox<String> cmbBusquedaMedicos;
    private javax.swing.JComboBox<String> cmbBusquedaPaciente;
    private javax.swing.JComboBox<String> cmbGeneroPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenuAcercaDe;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable5;
    private com.toedter.calendar.JDateChooser jdtFechaExpiracionExamenMedico;
    private com.toedter.calendar.JDateChooser jdtFechaNacimientoExamenMedico;
    private com.toedter.calendar.JDateChooser jdtFechaNacimientoPaciente;
    private javax.swing.JTable tablePaciente;
    private javax.swing.JTextField txtAniosContratoMedico;
    private javax.swing.JTextField txtApellidoExamenMedico;
    private javax.swing.JTextField txtApellidoMedico;
    private javax.swing.JTextField txtApellidoPaciente;
    private javax.swing.JTextField txtBusquedaExamenMedico;
    private javax.swing.JTextField txtBusquedaHistorialMedico;
    private javax.swing.JTextField txtBusquedaMedicos;
    private javax.swing.JTextField txtBusquedaPaciente;
    private javax.swing.JTextField txtCedulaExamenesMedicos;
    private javax.swing.JTextField txtCedulaMedico;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtCodigoHistorialMedico;
    private javax.swing.JTextField txtCodigoMedico;
    private javax.swing.JTextField txtCodigoMedicoExamenMedico;
    private javax.swing.JTextField txtCodigoMedicoHistorialMedico;
    private javax.swing.JTextField txtDatosMedicoHistorialMedico;
    private javax.swing.JTextField txtDatosPacienteHistorialMedico;
    private javax.swing.JTextField txtDireccionMedico;
    private javax.swing.JTextField txtEdadPaciente;
    private javax.swing.JButton txtEditarPaciente;
    private javax.swing.JButton txtEliminarPaciente;
    private javax.swing.JTextField txtEspecialidadMedico;
    private javax.swing.JTextField txtEstadoCivilPaciente;
    private javax.swing.JTextField txtGeneroExamenMedico;
    private javax.swing.JTextField txtHistoriaClinicaExamenesMedicos;
    private javax.swing.JTextField txtHistoriaClinicaPaciente;
    private javax.swing.JTextField txtHistorialClinicoPacienteHistorialMedico;
    private javax.swing.JTextArea txtInstruccionesExamenMedico;
    private javax.swing.JTextArea txtInstruccionesHistorialMedico;
    private javax.swing.JButton txtLimpiarHistorialMedico;
    private javax.swing.JTextField txtMedicamentosHistorialMedico;
    private javax.swing.JTextField txtNombreExamenMedico;
    private javax.swing.JTextField txtNombreMedico;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextArea txtPadecimientoHistorialMedico;
    private javax.swing.JTextField txtResidenciaPaciente;
    private javax.swing.JTextField txtTipoExamenExamenMedico;
    // End of variables declaration//GEN-END:variables

    @Override
    public void clickPacientes(Pacientes p) {
        pacienteseditareliminar = p;
        txtHistoriaClinicaPaciente.setText(pacienteseditareliminar.getHistoriaclinica());
        txtCedulaPaciente.setText(pacienteseditareliminar.getCedula());
        txtNombrePaciente.setText(pacienteseditareliminar.getNombre());
        txtApellidoPaciente.setText(pacienteseditareliminar.getApellido());
        jdtFechaNacimientoPaciente.setDate(pacienteseditareliminar.getFecha_nacimiento());
        txtResidenciaPaciente.setText(pacienteseditareliminar.getResidencia());
        txtEdadPaciente.setText(String.valueOf(pacienteseditareliminar.getEdad()));
        cmbGeneroPaciente.setSelectedIndex(pacienteseditareliminar.getGenero());
        txtEstadoCivilPaciente.setText(pacienteseditareliminar.getEstado_civil());
        bloquearCamposPaciente();
    }

    @Override
    public void clickMedicos(Medicos p) {
        medicoeditareliminar = p;
        txtCedulaMedico.setText(medicoeditareliminar.getCedula());
        txtNombreMedico.setText(medicoeditareliminar.getNombre());
        txtApellidoMedico.setText(medicoeditareliminar.getApellido());
        txtCodigoMedico.setText(medicoeditareliminar.getCodigo());
        txtDireccionMedico.setText(medicoeditareliminar.getDireccion());
        txtAniosContratoMedico.setText(String.valueOf(medicoeditareliminar.getAnios_contrato()));
        txtEspecialidadMedico.setText(medicoeditareliminar.getEspecialidad());
        bloqueardatosMedicos();
    }

    @Override
    public void clickHistorialMedico(HistorialMedico p) {
        historialmedicoeditar = p;
        txtCodigoHistorialMedico.setText(historialmedicoeditar.getCodigo_historial_medico());
        txtHistorialClinicoPacienteHistorialMedico.setText(historialmedicoeditar.getHistoria_clinica_paciente());
        datosPaciente();
        txtCodigoMedicoHistorialMedico.setText(historialmedicoeditar.getCodigo_medico());
        datosMedicos();
        txtPadecimientoHistorialMedico.setText(historialmedicoeditar.getPadecimiento());
        txtMedicamentosHistorialMedico.setText(historialmedicoeditar.getMedicaciones());
        txtInstruccionesHistorialMedico.setText(historialmedicoeditar.getInstrucciones());
    }

    @Override
    public void clickExamenesMedicos(ExamenesMedicos p) {
        examenmedicoguardar = p;
        txtTipoExamenExamenMedico.setText(examenmedicoguardar.getTipo());
        txtInstruccionesExamenMedico.setText(examenmedicoguardar.getInstrucciones());
        txtHistoriaClinicaExamenesMedicos.setText(examenmedicoguardar.getHistoria_clinica_paciente());
        txtCedulaExamenesMedicos.setText(examenmedicoguardar.getCedula());
        txtNombreExamenMedico.setText(examenmedicoguardar.getNombre());
        txtApellidoExamenMedico.setText(examenmedicoguardar.getApellido());
        jdtFechaNacimientoExamenMedico.setDate(examenmedicoguardar.getFecha_nacimiento());
        if (examenmedicoguardar.getGenero() == 1) {
            txtGeneroExamenMedico.setText("Masculino");
        } else {
            txtGeneroExamenMedico.setText("Femenino");
        }
        txtCodigoMedicoExamenMedico.setText(examenmedicoguardar.getCodigo_medico());
        jdtFechaExpiracionExamenMedico.setDate(examenmedicoguardar.getFecha_expiracion());
    }

}
